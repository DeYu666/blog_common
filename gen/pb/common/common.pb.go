// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        (unknown)
// source: pb/common/common.proto

package common

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SPUProperty int32

const (
	// 保留位
	SPUProperty_UNKNOWN SPUProperty = 0
	// 静态库，时空库等产品1:N搜索时需要用
	SPUProperty_QPS SPUProperty = 1
	// 静态库，时空库等产品的容量限制
	SPUProperty_CAPACITY SPUProperty = 2
	// 后付费扣减时间，比如`T+30`中的`+30`
	SPUProperty_POSTPAID SPUProperty = 3
	// 预付费扣减时间，比如`T-1`中的`-1`
	SPUProperty_PREPAID SPUProperty = 4
	// 数据源
	SPUProperty_VALUEPOINT SPUProperty = 20
)

// Enum value maps for SPUProperty.
var (
	SPUProperty_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "QPS",
		2:  "CAPACITY",
		3:  "POSTPAID",
		4:  "PREPAID",
		20: "VALUEPOINT",
	}
	SPUProperty_value = map[string]int32{
		"UNKNOWN":    0,
		"QPS":        1,
		"CAPACITY":   2,
		"POSTPAID":   3,
		"PREPAID":    4,
		"VALUEPOINT": 20,
	}
)

func (x SPUProperty) Enum() *SPUProperty {
	p := new(SPUProperty)
	*p = x
	return p
}

func (x SPUProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SPUProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_common_common_proto_enumTypes[0].Descriptor()
}

func (SPUProperty) Type() protoreflect.EnumType {
	return &file_pb_common_common_proto_enumTypes[0]
}

func (x SPUProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SPUProperty.Descriptor instead.
func (SPUProperty) EnumDescriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{0}
}

type PayType int32

const (
	// 未知模式
	PayType_PAY_TYPE_UNKNOWN PayType = 0
	// 预付费(前向付费)模式
	PayType_PAY_TYPE_PRE PayType = 1
	// 后付费模式
	PayType_PAY_TYPE_POST PayType = 2
)

// Enum value maps for PayType.
var (
	PayType_name = map[int32]string{
		0: "PAY_TYPE_UNKNOWN",
		1: "PAY_TYPE_PRE",
		2: "PAY_TYPE_POST",
	}
	PayType_value = map[string]int32{
		"PAY_TYPE_UNKNOWN": 0,
		"PAY_TYPE_PRE":     1,
		"PAY_TYPE_POST":    2,
	}
)

func (x PayType) Enum() *PayType {
	p := new(PayType)
	*p = x
	return p
}

func (x PayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_common_common_proto_enumTypes[1].Descriptor()
}

func (PayType) Type() protoreflect.EnumType {
	return &file_pb_common_common_proto_enumTypes[1]
}

func (x PayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayType.Descriptor instead.
func (PayType) EnumDescriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{1}
}

type MetricType int32

const (
	// 未知模式
	MetricType_METRIC_TYPE_UNKNOWN MetricType = 0
	// 计件类的SKU
	MetricType_COUNTER MetricType = 1
	// 计件的包
	MetricType_COUNTER_PACKAGE MetricType = 2
	// 计件*计时的SKU
	MetricType_GAUGE MetricType = 3
	// 计件*计时的包
	MetricType_GAUGE_PACKAGE MetricType = 4
)

// Enum value maps for MetricType.
var (
	MetricType_name = map[int32]string{
		0: "METRIC_TYPE_UNKNOWN",
		1: "COUNTER",
		2: "COUNTER_PACKAGE",
		3: "GAUGE",
		4: "GAUGE_PACKAGE",
	}
	MetricType_value = map[string]int32{
		"METRIC_TYPE_UNKNOWN": 0,
		"COUNTER":             1,
		"COUNTER_PACKAGE":     2,
		"GAUGE":               3,
		"GAUGE_PACKAGE":       4,
	}
)

func (x MetricType) Enum() *MetricType {
	p := new(MetricType)
	*p = x
	return p
}

func (x MetricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_common_common_proto_enumTypes[2].Descriptor()
}

func (MetricType) Type() protoreflect.EnumType {
	return &file_pb_common_common_proto_enumTypes[2]
}

func (x MetricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricType.Descriptor instead.
func (MetricType) EnumDescriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{2}
}

type ServiceAction int32

const (
	// 未知的服务操作.
	ServiceAction_SERVICE_ACTION_UNKNOWN ServiceAction = 0
	// 创建视频流，创建db, 推图. 属性搜索, FE/PE特征提取.
	ServiceAction_SERVICE_ACTION_CREATE ServiceAction = 1
	// ACTION_READ for 1:1查询, 1:N查询 1:1比对.
	ServiceAction_SERVICE_ACTION_READ ServiceAction = 2
	// 更新.
	ServiceAction_SERVICE_ACTION_UPDATE ServiceAction = 3
	// 删除.
	ServiceAction_SERVICE_ACTION_DELETE ServiceAction = 4
)

// Enum value maps for ServiceAction.
var (
	ServiceAction_name = map[int32]string{
		0: "SERVICE_ACTION_UNKNOWN",
		1: "SERVICE_ACTION_CREATE",
		2: "SERVICE_ACTION_READ",
		3: "SERVICE_ACTION_UPDATE",
		4: "SERVICE_ACTION_DELETE",
	}
	ServiceAction_value = map[string]int32{
		"SERVICE_ACTION_UNKNOWN": 0,
		"SERVICE_ACTION_CREATE":  1,
		"SERVICE_ACTION_READ":    2,
		"SERVICE_ACTION_UPDATE":  3,
		"SERVICE_ACTION_DELETE":  4,
	}
)

func (x ServiceAction) Enum() *ServiceAction {
	p := new(ServiceAction)
	*p = x
	return p
}

func (x ServiceAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceAction) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_common_common_proto_enumTypes[3].Descriptor()
}

func (ServiceAction) Type() protoreflect.EnumType {
	return &file_pb_common_common_proto_enumTypes[3]
}

func (x ServiceAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceAction.Descriptor instead.
func (ServiceAction) EnumDescriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{3}
}

// 账户的服务的状态, 默认NORMAL状态不保存，DB种查不到就是NORMAL，运营设置状态后才在DB保存
type ServiceStatus int32

const (
	// 服务运行中
	ServiceStatus_SERVICE_STATUS_NORMAL ServiceStatus = 0
	// 服务停止
	ServiceStatus_SERVICE_STATUS_FORBIDDEN ServiceStatus = 1
)

// Enum value maps for ServiceStatus.
var (
	ServiceStatus_name = map[int32]string{
		0: "SERVICE_STATUS_NORMAL",
		1: "SERVICE_STATUS_FORBIDDEN",
	}
	ServiceStatus_value = map[string]int32{
		"SERVICE_STATUS_NORMAL":    0,
		"SERVICE_STATUS_FORBIDDEN": 1,
	}
)

func (x ServiceStatus) Enum() *ServiceStatus {
	p := new(ServiceStatus)
	*p = x
	return p
}

func (x ServiceStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_common_common_proto_enumTypes[4].Descriptor()
}

func (ServiceStatus) Type() protoreflect.EnumType {
	return &file_pb_common_common_proto_enumTypes[4]
}

func (x ServiceStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceStatus.Descriptor instead.
func (ServiceStatus) EnumDescriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{4}
}

type PostQuotaOrStatus_MessageType int32

const (
	// 发布service quota 信息
	PostQuotaOrStatus_QUOTA PostQuotaOrStatus_MessageType = 0
	// 发布账户状态
	PostQuotaOrStatus_STATUS PostQuotaOrStatus_MessageType = 1
)

// Enum value maps for PostQuotaOrStatus_MessageType.
var (
	PostQuotaOrStatus_MessageType_name = map[int32]string{
		0: "QUOTA",
		1: "STATUS",
	}
	PostQuotaOrStatus_MessageType_value = map[string]int32{
		"QUOTA":  0,
		"STATUS": 1,
	}
)

func (x PostQuotaOrStatus_MessageType) Enum() *PostQuotaOrStatus_MessageType {
	p := new(PostQuotaOrStatus_MessageType)
	*p = x
	return p
}

func (x PostQuotaOrStatus_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PostQuotaOrStatus_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_common_common_proto_enumTypes[5].Descriptor()
}

func (PostQuotaOrStatus_MessageType) Type() protoreflect.EnumType {
	return &file_pb_common_common_proto_enumTypes[5]
}

func (x PostQuotaOrStatus_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PostQuotaOrStatus_MessageType.Descriptor instead.
func (PostQuotaOrStatus_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{5, 0}
}

type ListPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 可选, 开始位置, 取值:>=0, 0为第一条; 默认值为0.
	// 返回本次请求返回的第一条记录实际位置(一般与输入一致).
	// [EN] Optional, start position, value: > = 0, 0 is the first line; the
	// default value is 0. In response, actual offset of the first returned record
	// is returned (generally equals to the offset in request).
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 长度, 取值范围[1,100], 如果超出范围, 则返回失败;
	// 在某些接口中limit范围可能会重新定义, 请以其接口的补充说明为准. [EN] Length,
	// default value range [1,100], if it is out of the range, error will be
	// returned; as the limit range may be redefined in some APIs, please refer to
	// the supplementary description of these APIs.
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 可选, 总数, 请求无须填此参数, 响应时填写.
	// [EN] Optional, this parameter is not required for request, but will be
	// filled in response.
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListPage) Reset() {
	*x = ListPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_common_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPage) ProtoMessage() {}

func (x *ListPage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_common_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPage.ProtoReflect.Descriptor instead.
func (*ListPage) Descriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{0}
}

func (x *ListPage) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListPage) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPage) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PageMarker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 分页大小.
	// [EN] Page size, range [10, 100].
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// 分页标志, 第一页传空. 默认为空.
	// [EN] Page marker, first page is empty. Empty by default.
	Marker string `protobuf:"bytes,2,opt,name=marker,proto3" json:"marker,omitempty"`
}

func (x *PageMarker) Reset() {
	*x = PageMarker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_common_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageMarker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageMarker) ProtoMessage() {}

func (x *PageMarker) ProtoReflect() protoreflect.Message {
	mi := &file_pb_common_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageMarker.ProtoReflect.Descriptor instead.
func (*PageMarker) Descriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{1}
}

func (x *PageMarker) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PageMarker) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

// 审计日志信息
// [EN] audit log
type AuditLogTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 日志的uuid，作为日志的唯一标识，用于去重.
	LogKey string `protobuf:"bytes,1,opt,name=log_key,json=logKey,proto3" json:"log_key,omitempty"`
	// 账户id.
	AccountId uint64 `protobuf:"varint,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// site id.没有的暂时写0
	SiteId uint32 `protobuf:"varint,3,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// project id. 没有的暂时写0
	ProjectId uint32 `protobuf:"varint,4,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// spu id.
	SpuId uint64 `protobuf:"varint,5,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
	// 数据来源，IDS是API url，其他业务根据需要定义具体的
	ValuePoint string `protobuf:"bytes,6,opt,name=value_point,json=valuePoint,proto3" json:"value_point,omitempty"`
	// user_id.
	UserId uint32 `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 应用 id.
	ServiceAction ServiceAction `protobuf:"varint,8,opt,name=service_action,json=serviceAction,proto3,enum=common.ServiceAction" json:"service_action,omitempty"`
	// 订单生效时间/请求发生时间/任务创建时间/服务生效时间，就是具体的服务开始的时间
	// [EN] operation timestamp.
	OperationTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=operation_time,json=operationTime,proto3" json:"operation_time,omitempty"`
	// 批量操作的计数，比如对于推图,记录有几张图.
	Count int64 `protobuf:"varint,10,opt,name=count,proto3" json:"count,omitempty"`
	// http status code
	StatusCode uint32 `protobuf:"varint,11,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// metadata
	Metadata string `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// 日志打印时的时间
	EventTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
}

func (x *AuditLogTrack) Reset() {
	*x = AuditLogTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_common_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditLogTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditLogTrack) ProtoMessage() {}

func (x *AuditLogTrack) ProtoReflect() protoreflect.Message {
	mi := &file_pb_common_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditLogTrack.ProtoReflect.Descriptor instead.
func (*AuditLogTrack) Descriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{2}
}

func (x *AuditLogTrack) GetLogKey() string {
	if x != nil {
		return x.LogKey
	}
	return ""
}

func (x *AuditLogTrack) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AuditLogTrack) GetSiteId() uint32 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *AuditLogTrack) GetProjectId() uint32 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AuditLogTrack) GetSpuId() uint64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *AuditLogTrack) GetValuePoint() string {
	if x != nil {
		return x.ValuePoint
	}
	return ""
}

func (x *AuditLogTrack) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuditLogTrack) GetServiceAction() ServiceAction {
	if x != nil {
		return x.ServiceAction
	}
	return ServiceAction_SERVICE_ACTION_UNKNOWN
}

func (x *AuditLogTrack) GetOperationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OperationTime
	}
	return nil
}

func (x *AuditLogTrack) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *AuditLogTrack) GetStatusCode() uint32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *AuditLogTrack) GetMetadata() string {
	if x != nil {
		return x.Metadata
	}
	return ""
}

func (x *AuditLogTrack) GetEventTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EventTime
	}
	return nil
}

// 订单切换时，bill-service通知order服务quota
type ServiceQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账户id
	AccountId uint64 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// site id
	SiteId uint64 `protobuf:"varint,2,opt,name=site_id,json=siteId,proto3" json:"site_id,omitempty"`
	// 项目id
	ProjectId uint64 `protobuf:"varint,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// spu_id
	SpuId uint64 `protobuf:"varint,4,opt,name=spu_id,json=spuId,proto3" json:"spu_id,omitempty"`
	// 当前在用的order_id, 0代表当前没有找到一个有效的订单
	OrderId uint64 `protobuf:"varint,5,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 当前在用的order_item_id
	OrderItemId uint64 `protobuf:"varint,6,opt,name=order_item_id,json=orderItemId,proto3" json:"order_item_id,omitempty"`
	// sku type: counter, counter_package, gauge, gauge_package 4种
	SkuType MetricType `protobuf:"varint,7,opt,name=sku_type,json=skuType,proto3,enum=common.MetricType" json:"sku_type,omitempty"`
	// quotas是一个json结构，{limit: 5 }, qps/带宽限制在limit, limit为0表示不可用，limit > 0 qps/带宽限制值,具体的根据sku type由业务层判断
	Quotas string `protobuf:"bytes,8,opt,name=quotas,proto3" json:"quotas,omitempty"`
}

func (x *ServiceQuota) Reset() {
	*x = ServiceQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_common_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceQuota) ProtoMessage() {}

func (x *ServiceQuota) ProtoReflect() protoreflect.Message {
	mi := &file_pb_common_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceQuota.ProtoReflect.Descriptor instead.
func (*ServiceQuota) Descriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceQuota) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ServiceQuota) GetSiteId() uint64 {
	if x != nil {
		return x.SiteId
	}
	return 0
}

func (x *ServiceQuota) GetProjectId() uint64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ServiceQuota) GetSpuId() uint64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ServiceQuota) GetOrderId() uint64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ServiceQuota) GetOrderItemId() uint64 {
	if x != nil {
		return x.OrderItemId
	}
	return 0
}

func (x *ServiceQuota) GetSkuType() MetricType {
	if x != nil {
		return x.SkuType
	}
	return MetricType_METRIC_TYPE_UNKNOWN
}

func (x *ServiceQuota) GetQuotas() string {
	if x != nil {
		return x.Quotas
	}
	return ""
}

// quota有变化时，通知相关模块api-ingress, dccService, dscService, bill-service
type AccountServiceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账户id
	AccountId uint64 `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 当前是否停服,如果停服，quotas忽略
	ServiceStatus ServiceStatus `protobuf:"varint,2,opt,name=service_status,json=serviceStatus,proto3,enum=common.ServiceStatus" json:"service_status,omitempty"`
}

func (x *AccountServiceStatus) Reset() {
	*x = AccountServiceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_common_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountServiceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountServiceStatus) ProtoMessage() {}

func (x *AccountServiceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_common_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountServiceStatus.ProtoReflect.Descriptor instead.
func (*AccountServiceStatus) Descriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{4}
}

func (x *AccountServiceStatus) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *AccountServiceStatus) GetServiceStatus() ServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return ServiceStatus_SERVICE_STATUS_NORMAL
}

type PostQuotaOrStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 消息类型
	MessageType PostQuotaOrStatus_MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=common.PostQuotaOrStatus_MessageType" json:"message_type,omitempty"`
	// MessageType 为QUOTA时的消息体
	ServiceQuotas *ServiceQuota `protobuf:"bytes,2,opt,name=service_quotas,json=serviceQuotas,proto3" json:"service_quotas,omitempty"`
	// MessageType 为STATUS时的消息体
	ServiceStatus *AccountServiceStatus `protobuf:"bytes,3,opt,name=service_status,json=serviceStatus,proto3" json:"service_status,omitempty"`
}

func (x *PostQuotaOrStatus) Reset() {
	*x = PostQuotaOrStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_common_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostQuotaOrStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQuotaOrStatus) ProtoMessage() {}

func (x *PostQuotaOrStatus) ProtoReflect() protoreflect.Message {
	mi := &file_pb_common_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQuotaOrStatus.ProtoReflect.Descriptor instead.
func (*PostQuotaOrStatus) Descriptor() ([]byte, []int) {
	return file_pb_common_common_proto_rawDescGZIP(), []int{5}
}

func (x *PostQuotaOrStatus) GetMessageType() PostQuotaOrStatus_MessageType {
	if x != nil {
		return x.MessageType
	}
	return PostQuotaOrStatus_QUOTA
}

func (x *PostQuotaOrStatus) GetServiceQuotas() *ServiceQuota {
	if x != nil {
		return x.ServiceQuotas
	}
	return nil
}

func (x *PostQuotaOrStatus) GetServiceStatus() *AccountServiceStatus {
	if x != nil {
		return x.ServiceStatus
	}
	return nil
}

var File_pb_common_common_proto protoreflect.FileDescriptor

var file_pb_common_common_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61,
	0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x4e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x3a, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0xdf, 0x03, 0x0a, 0x0d,
	0x41, 0x75, 0x64, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6c, 0x6f, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73,
	0x70, 0x75, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x82, 0x02,
	0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x73, 0x69, 0x74, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x73,
	0x6b, 0x75, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x73, 0x6b, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74,
	0x61, 0x73, 0x22, 0x73, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x4f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x0b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x4f, 0x54,
	0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x2a,
	0x5c, 0x0a, 0x0b, 0x53, 0x50, 0x55, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x51,
	0x50, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x53, 0x54, 0x50, 0x41, 0x49, 0x44, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x45, 0x50, 0x41, 0x49, 0x44, 0x10, 0x04, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x14, 0x2a, 0x44, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x59, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53,
	0x54, 0x10, 0x02, 0x2a, 0x65, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x55, 0x4e, 0x54,
	0x45, 0x52, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x41, 0x55, 0x47, 0x45,
	0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x2a, 0x95, 0x01, 0x0a, 0x0d, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x04, 0x2a, 0x48, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x01, 0x42, 0x5f, 0x5a, 0x33,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x65, 0x59, 0x75, 0x36,
	0x36, 0x36, 0x2f, 0x62, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x92, 0x41, 0x27, 0x12, 0x25, 0x0a, 0x1b, 0x62, 0x6c, 0x6f, 0x67, 0x20, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x20, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x32, 0x06, 0x76, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_common_common_proto_rawDescOnce sync.Once
	file_pb_common_common_proto_rawDescData = file_pb_common_common_proto_rawDesc
)

func file_pb_common_common_proto_rawDescGZIP() []byte {
	file_pb_common_common_proto_rawDescOnce.Do(func() {
		file_pb_common_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_common_common_proto_rawDescData)
	})
	return file_pb_common_common_proto_rawDescData
}

var file_pb_common_common_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_pb_common_common_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_pb_common_common_proto_goTypes = []interface{}{
	(SPUProperty)(0),                   // 0: common.SPUProperty
	(PayType)(0),                       // 1: common.PayType
	(MetricType)(0),                    // 2: common.MetricType
	(ServiceAction)(0),                 // 3: common.ServiceAction
	(ServiceStatus)(0),                 // 4: common.ServiceStatus
	(PostQuotaOrStatus_MessageType)(0), // 5: common.PostQuotaOrStatus.MessageType
	(*ListPage)(nil),                   // 6: common.ListPage
	(*PageMarker)(nil),                 // 7: common.PageMarker
	(*AuditLogTrack)(nil),              // 8: common.AuditLogTrack
	(*ServiceQuota)(nil),               // 9: common.ServiceQuota
	(*AccountServiceStatus)(nil),       // 10: common.AccountServiceStatus
	(*PostQuotaOrStatus)(nil),          // 11: common.PostQuotaOrStatus
	(*timestamppb.Timestamp)(nil),      // 12: google.protobuf.Timestamp
}
var file_pb_common_common_proto_depIdxs = []int32{
	3,  // 0: common.AuditLogTrack.service_action:type_name -> common.ServiceAction
	12, // 1: common.AuditLogTrack.operation_time:type_name -> google.protobuf.Timestamp
	12, // 2: common.AuditLogTrack.event_time:type_name -> google.protobuf.Timestamp
	2,  // 3: common.ServiceQuota.sku_type:type_name -> common.MetricType
	4,  // 4: common.AccountServiceStatus.service_status:type_name -> common.ServiceStatus
	5,  // 5: common.PostQuotaOrStatus.message_type:type_name -> common.PostQuotaOrStatus.MessageType
	9,  // 6: common.PostQuotaOrStatus.service_quotas:type_name -> common.ServiceQuota
	10, // 7: common.PostQuotaOrStatus.service_status:type_name -> common.AccountServiceStatus
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_pb_common_common_proto_init() }
func file_pb_common_common_proto_init() {
	if File_pb_common_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_common_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_common_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageMarker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_common_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditLogTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_common_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_common_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountServiceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_common_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostQuotaOrStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_common_common_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_common_common_proto_goTypes,
		DependencyIndexes: file_pb_common_common_proto_depIdxs,
		EnumInfos:         file_pb_common_common_proto_enumTypes,
		MessageInfos:      file_pb_common_common_proto_msgTypes,
	}.Build()
	File_pb_common_common_proto = out.File
	file_pb_common_common_proto_rawDesc = nil
	file_pb_common_common_proto_goTypes = nil
	file_pb_common_common_proto_depIdxs = nil
}
