// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiaryServiceClient is the client API for DiaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiaryServiceClient interface {
	// 获取日记列表，根据用户角色来判断他所能看到的状态
	// 需要带上 X-Keystone-User-Info
	FindDiarys(ctx context.Context, in *FindDiarysRequest, opts ...grpc.CallOption) (*FindDiarysReply, error)
	// 生成新的日记
	// 需要带上X-Keystone-User-Info
	CreateDiary(ctx context.Context, in *CreateDiaryRequest, opts ...grpc.CallOption) (*CreateDiaryReply, error)
	// 更新日记
	// 需要带上X-Keystone-User-Info
	UpdateDiary(ctx context.Context, in *UpdateDiaryRequest, opts ...grpc.CallOption) (*UpdateDiaryReply, error)
	// 删除日记
	// 需要带上X-Keystone-User-Info
	DeleteDiary(ctx context.Context, in *DeleteDiaryRequest, opts ...grpc.CallOption) (*DeleteDiaryReply, error)
}

type diaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiaryServiceClient(cc grpc.ClientConnInterface) DiaryServiceClient {
	return &diaryServiceClient{cc}
}

func (c *diaryServiceClient) FindDiarys(ctx context.Context, in *FindDiarysRequest, opts ...grpc.CallOption) (*FindDiarysReply, error) {
	out := new(FindDiarysReply)
	err := c.cc.Invoke(ctx, "/pb.DiaryService/FindDiarys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) CreateDiary(ctx context.Context, in *CreateDiaryRequest, opts ...grpc.CallOption) (*CreateDiaryReply, error) {
	out := new(CreateDiaryReply)
	err := c.cc.Invoke(ctx, "/pb.DiaryService/CreateDiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) UpdateDiary(ctx context.Context, in *UpdateDiaryRequest, opts ...grpc.CallOption) (*UpdateDiaryReply, error) {
	out := new(UpdateDiaryReply)
	err := c.cc.Invoke(ctx, "/pb.DiaryService/UpdateDiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diaryServiceClient) DeleteDiary(ctx context.Context, in *DeleteDiaryRequest, opts ...grpc.CallOption) (*DeleteDiaryReply, error) {
	out := new(DeleteDiaryReply)
	err := c.cc.Invoke(ctx, "/pb.DiaryService/DeleteDiary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiaryServiceServer is the server API for DiaryService service.
// All implementations must embed UnimplementedDiaryServiceServer
// for forward compatibility
type DiaryServiceServer interface {
	// 获取日记列表，根据用户角色来判断他所能看到的状态
	// 需要带上 X-Keystone-User-Info
	FindDiarys(context.Context, *FindDiarysRequest) (*FindDiarysReply, error)
	// 生成新的日记
	// 需要带上X-Keystone-User-Info
	CreateDiary(context.Context, *CreateDiaryRequest) (*CreateDiaryReply, error)
	// 更新日记
	// 需要带上X-Keystone-User-Info
	UpdateDiary(context.Context, *UpdateDiaryRequest) (*UpdateDiaryReply, error)
	// 删除日记
	// 需要带上X-Keystone-User-Info
	DeleteDiary(context.Context, *DeleteDiaryRequest) (*DeleteDiaryReply, error)
	mustEmbedUnimplementedDiaryServiceServer()
}

// UnimplementedDiaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDiaryServiceServer struct {
}

func (UnimplementedDiaryServiceServer) FindDiarys(context.Context, *FindDiarysRequest) (*FindDiarysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDiarys not implemented")
}
func (UnimplementedDiaryServiceServer) CreateDiary(context.Context, *CreateDiaryRequest) (*CreateDiaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiary not implemented")
}
func (UnimplementedDiaryServiceServer) UpdateDiary(context.Context, *UpdateDiaryRequest) (*UpdateDiaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiary not implemented")
}
func (UnimplementedDiaryServiceServer) DeleteDiary(context.Context, *DeleteDiaryRequest) (*DeleteDiaryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiary not implemented")
}
func (UnimplementedDiaryServiceServer) mustEmbedUnimplementedDiaryServiceServer() {}

// UnsafeDiaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiaryServiceServer will
// result in compilation errors.
type UnsafeDiaryServiceServer interface {
	mustEmbedUnimplementedDiaryServiceServer()
}

func RegisterDiaryServiceServer(s grpc.ServiceRegistrar, srv DiaryServiceServer) {
	s.RegisterService(&DiaryService_ServiceDesc, srv)
}

func _DiaryService_FindDiarys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindDiarysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).FindDiarys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DiaryService/FindDiarys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).FindDiarys(ctx, req.(*FindDiarysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_CreateDiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).CreateDiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DiaryService/CreateDiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).CreateDiary(ctx, req.(*CreateDiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_UpdateDiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).UpdateDiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DiaryService/UpdateDiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).UpdateDiary(ctx, req.(*UpdateDiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiaryService_DeleteDiary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiaryServiceServer).DeleteDiary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.DiaryService/DeleteDiary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiaryServiceServer).DeleteDiary(ctx, req.(*DeleteDiaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiaryService_ServiceDesc is the grpc.ServiceDesc for DiaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.DiaryService",
	HandlerType: (*DiaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindDiarys",
			Handler:    _DiaryService_FindDiarys_Handler,
		},
		{
			MethodName: "CreateDiary",
			Handler:    _DiaryService_CreateDiary_Handler,
		},
		{
			MethodName: "UpdateDiary",
			Handler:    _DiaryService_UpdateDiary_Handler,
		},
		{
			MethodName: "DeleteDiary",
			Handler:    _DiaryService_DeleteDiary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/diary.proto",
}
