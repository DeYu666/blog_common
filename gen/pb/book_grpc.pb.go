// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BooksListServiceClient is the client API for BooksListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BooksListServiceClient interface {
	// 获取书籍列表，返回除 bookcontent 书籍内容 以外的信息
	FindBooksLists(ctx context.Context, in *FindBooksListsRequest, opts ...grpc.CallOption) (*FindBooksListsReply, error)
	// 获取单个书籍信息
	GetBooksList(ctx context.Context, in *GetBooksListRequest, opts ...grpc.CallOption) (*GetBooksListReply, error)
	// 生成新的书籍信息
	// 需要带上X-Keystone-User-Info
	CreateBooksList(ctx context.Context, in *CreateBooksListRequest, opts ...grpc.CallOption) (*CreateBooksListReply, error)
	// 更新书籍信息
	// 需要带上X-Keystone-User-Info
	UpdateBooksList(ctx context.Context, in *UpdateBooksListRequest, opts ...grpc.CallOption) (*UpdateBooksListReply, error)
	// 删除书籍信息
	// 需要带上X-Keystone-User-Info
	DeleteBooksList(ctx context.Context, in *DeleteBooksListRequest, opts ...grpc.CallOption) (*DeleteBooksListReply, error)
	// 生成新的书籍内容
	// 需要带上X-Keystone-User-Info
	CreateBookContent(ctx context.Context, in *CreateBookContentRequest, opts ...grpc.CallOption) (*CreateBookContentReply, error)
	// 更新书籍内容
	// 需要带上X-Keystone-User-Info
	UpdateBookContent(ctx context.Context, in *UpdateBookContentRequest, opts ...grpc.CallOption) (*UpdateBookContentReply, error)
	// 删除书籍内容
	// 需要带上X-Keystone-User-Info
	DeleteBookContent(ctx context.Context, in *DeleteBookContentRequest, opts ...grpc.CallOption) (*DeleteBookContentReply, error)
}

type booksListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBooksListServiceClient(cc grpc.ClientConnInterface) BooksListServiceClient {
	return &booksListServiceClient{cc}
}

func (c *booksListServiceClient) FindBooksLists(ctx context.Context, in *FindBooksListsRequest, opts ...grpc.CallOption) (*FindBooksListsReply, error) {
	out := new(FindBooksListsReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/FindBooksLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) GetBooksList(ctx context.Context, in *GetBooksListRequest, opts ...grpc.CallOption) (*GetBooksListReply, error) {
	out := new(GetBooksListReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/GetBooksList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) CreateBooksList(ctx context.Context, in *CreateBooksListRequest, opts ...grpc.CallOption) (*CreateBooksListReply, error) {
	out := new(CreateBooksListReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/CreateBooksList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) UpdateBooksList(ctx context.Context, in *UpdateBooksListRequest, opts ...grpc.CallOption) (*UpdateBooksListReply, error) {
	out := new(UpdateBooksListReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/UpdateBooksList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) DeleteBooksList(ctx context.Context, in *DeleteBooksListRequest, opts ...grpc.CallOption) (*DeleteBooksListReply, error) {
	out := new(DeleteBooksListReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/DeleteBooksList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) CreateBookContent(ctx context.Context, in *CreateBookContentRequest, opts ...grpc.CallOption) (*CreateBookContentReply, error) {
	out := new(CreateBookContentReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/CreateBookContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) UpdateBookContent(ctx context.Context, in *UpdateBookContentRequest, opts ...grpc.CallOption) (*UpdateBookContentReply, error) {
	out := new(UpdateBookContentReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/UpdateBookContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksListServiceClient) DeleteBookContent(ctx context.Context, in *DeleteBookContentRequest, opts ...grpc.CallOption) (*DeleteBookContentReply, error) {
	out := new(DeleteBookContentReply)
	err := c.cc.Invoke(ctx, "/pb.BooksListService/DeleteBookContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksListServiceServer is the server API for BooksListService service.
// All implementations must embed UnimplementedBooksListServiceServer
// for forward compatibility
type BooksListServiceServer interface {
	// 获取书籍列表，返回除 bookcontent 书籍内容 以外的信息
	FindBooksLists(context.Context, *FindBooksListsRequest) (*FindBooksListsReply, error)
	// 获取单个书籍信息
	GetBooksList(context.Context, *GetBooksListRequest) (*GetBooksListReply, error)
	// 生成新的书籍信息
	// 需要带上X-Keystone-User-Info
	CreateBooksList(context.Context, *CreateBooksListRequest) (*CreateBooksListReply, error)
	// 更新书籍信息
	// 需要带上X-Keystone-User-Info
	UpdateBooksList(context.Context, *UpdateBooksListRequest) (*UpdateBooksListReply, error)
	// 删除书籍信息
	// 需要带上X-Keystone-User-Info
	DeleteBooksList(context.Context, *DeleteBooksListRequest) (*DeleteBooksListReply, error)
	// 生成新的书籍内容
	// 需要带上X-Keystone-User-Info
	CreateBookContent(context.Context, *CreateBookContentRequest) (*CreateBookContentReply, error)
	// 更新书籍内容
	// 需要带上X-Keystone-User-Info
	UpdateBookContent(context.Context, *UpdateBookContentRequest) (*UpdateBookContentReply, error)
	// 删除书籍内容
	// 需要带上X-Keystone-User-Info
	DeleteBookContent(context.Context, *DeleteBookContentRequest) (*DeleteBookContentReply, error)
	mustEmbedUnimplementedBooksListServiceServer()
}

// UnimplementedBooksListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBooksListServiceServer struct {
}

func (UnimplementedBooksListServiceServer) FindBooksLists(context.Context, *FindBooksListsRequest) (*FindBooksListsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBooksLists not implemented")
}
func (UnimplementedBooksListServiceServer) GetBooksList(context.Context, *GetBooksListRequest) (*GetBooksListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooksList not implemented")
}
func (UnimplementedBooksListServiceServer) CreateBooksList(context.Context, *CreateBooksListRequest) (*CreateBooksListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooksList not implemented")
}
func (UnimplementedBooksListServiceServer) UpdateBooksList(context.Context, *UpdateBooksListRequest) (*UpdateBooksListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooksList not implemented")
}
func (UnimplementedBooksListServiceServer) DeleteBooksList(context.Context, *DeleteBooksListRequest) (*DeleteBooksListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBooksList not implemented")
}
func (UnimplementedBooksListServiceServer) CreateBookContent(context.Context, *CreateBookContentRequest) (*CreateBookContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBookContent not implemented")
}
func (UnimplementedBooksListServiceServer) UpdateBookContent(context.Context, *UpdateBookContentRequest) (*UpdateBookContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBookContent not implemented")
}
func (UnimplementedBooksListServiceServer) DeleteBookContent(context.Context, *DeleteBookContentRequest) (*DeleteBookContentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBookContent not implemented")
}
func (UnimplementedBooksListServiceServer) mustEmbedUnimplementedBooksListServiceServer() {}

// UnsafeBooksListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BooksListServiceServer will
// result in compilation errors.
type UnsafeBooksListServiceServer interface {
	mustEmbedUnimplementedBooksListServiceServer()
}

func RegisterBooksListServiceServer(s grpc.ServiceRegistrar, srv BooksListServiceServer) {
	s.RegisterService(&BooksListService_ServiceDesc, srv)
}

func _BooksListService_FindBooksLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBooksListsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).FindBooksLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/FindBooksLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).FindBooksLists(ctx, req.(*FindBooksListsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_GetBooksList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBooksListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).GetBooksList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/GetBooksList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).GetBooksList(ctx, req.(*GetBooksListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_CreateBooksList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBooksListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).CreateBooksList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/CreateBooksList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).CreateBooksList(ctx, req.(*CreateBooksListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_UpdateBooksList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBooksListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).UpdateBooksList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/UpdateBooksList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).UpdateBooksList(ctx, req.(*UpdateBooksListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_DeleteBooksList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBooksListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).DeleteBooksList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/DeleteBooksList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).DeleteBooksList(ctx, req.(*DeleteBooksListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_CreateBookContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).CreateBookContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/CreateBookContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).CreateBookContent(ctx, req.(*CreateBookContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_UpdateBookContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).UpdateBookContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/UpdateBookContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).UpdateBookContent(ctx, req.(*UpdateBookContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BooksListService_DeleteBookContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBookContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksListServiceServer).DeleteBookContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BooksListService/DeleteBookContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksListServiceServer).DeleteBookContent(ctx, req.(*DeleteBookContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BooksListService_ServiceDesc is the grpc.ServiceDesc for BooksListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BooksListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BooksListService",
	HandlerType: (*BooksListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindBooksLists",
			Handler:    _BooksListService_FindBooksLists_Handler,
		},
		{
			MethodName: "GetBooksList",
			Handler:    _BooksListService_GetBooksList_Handler,
		},
		{
			MethodName: "CreateBooksList",
			Handler:    _BooksListService_CreateBooksList_Handler,
		},
		{
			MethodName: "UpdateBooksList",
			Handler:    _BooksListService_UpdateBooksList_Handler,
		},
		{
			MethodName: "DeleteBooksList",
			Handler:    _BooksListService_DeleteBooksList_Handler,
		},
		{
			MethodName: "CreateBookContent",
			Handler:    _BooksListService_CreateBookContent_Handler,
		},
		{
			MethodName: "UpdateBookContent",
			Handler:    _BooksListService_UpdateBookContent_Handler,
		},
		{
			MethodName: "DeleteBookContent",
			Handler:    _BooksListService_DeleteBookContent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/book.proto",
}
